plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.neoforged.gradle.userdev' version '7.0.163'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = "${mod_id}-${mc_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "JEI"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "CurseMaven"
        url "https://cursemaven.com"
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "org.jgrapht:jgrapht-core:${jgt_version}"

    implementation "curse.maven:PrettyPipes-376737:${pp_version}"

    localRuntime "curse.maven:ScalableCatsForce-320926:${scalable_cats_force_version}"
    localRuntime "curse.maven:LargeTanks-291006:${tank_version}"

    localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mc_version          : mc_version, mc_version_range: mc_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
            mod_credits         : mod_credits
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

curseforge {
    project {
        apiKey = System.getenv('CURSEFORGE_API_PUBLISH')
        id = '479142'
        changelog = file('changelog.md').text
        changelogType = "markdown"
        releaseType = release_type
        addGameVersion mc_version // Add the Minecraft versions you're targeting
        addGameVersion "NeoForge" // Add the Minecraft versions you're targeting
        relations {
            requiredDependency "pretty-pipes"
        }
        mainArtifact(jar) {
            displayName = "$mod_name v$project.version"
        }
    }
}

modrinth {
    token = System.getenv('MODRINTH_API_PUBLISH')
    projectId = 'pretty-pipes-fluids'
    versionNumber = project.version
    versionName = "$mod_name v$project.version"
    versionType = release_type
    uploadFile = jar
    gameVersions = [mc_version] // Add the Minecraft versions you're targeting
    changelog = file('changelog.md').text
    dependencies {
        required.project "pretty-pipes"
    }
}