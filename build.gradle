plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = "${mod_id}-${mc_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

minecraft {

    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {

        }

        server {

        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "PrettyPipes"
        url = "https://maven.ellpeck.de"
    }

    maven {
        name = "JEI"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "CurseMaven"
        url "https://cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    minecraftLibrary "org.jgrapht:jgrapht-core:${jgt_version}"
    implementation fg.deobf("de.ellpeck.prettypipes:PrettyPipes:${pp_version}") { transitive = true }

    runtimeOnly fg.deobf("curse.maven:ITank-256991:${itank_curse_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mc_version   : mc_version, mc_version_range: mc_version_range,
            forge_version         : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
            mod_credits         : mod_credits
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

curseforge {
    project {
        apiKey = System.getenv('CURSEFORGE_API_PUBLISH')
        id = '479142'
        changelog = file('changelog.md').text
        changelogType = "markdown"
        releaseType = release_type
        addGameVersion mc_version // Add the Minecraft versions you're targeting
        addGameVersion "NeoForge" // Add the Minecraft versions you're targeting
        addGameVersion "Forge" // Add the Minecraft versions you're targeting
        relations {
            requiredDependency "pretty-pipes"
        }
        mainArtifact(jar) {
            displayName = "$mod_name v$project.version"
        }
    }
}

modrinth {
    token = System.getenv('MODRINTH_API_PUBLISH')
    projectId = 'pretty-pipes-fluids'
    versionNumber = project.version
    versionName = "$mod_name v$project.version"
    versionType = release_type
    uploadFile = jar
    gameVersions = [mc_version] // Add the Minecraft versions you're targeting
    loaders = ["neoforge", "forge"]
    changelog = file('changelog.md').text
    dependencies {
        required.project "pretty-pipes"
    }
}